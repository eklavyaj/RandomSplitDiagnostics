linetype="dashed", size = 1) +
ggplot2::scale_color_manual(name = "Distances",
values = c("Threshold 1 (c1)" = "#006CFF",
"Threshold 2 (c2)" = "#FF0000",
"Distance (d)" = "#03B621")) +
ggplot2::theme_bw() +
ggplot2::labs(x = "Modified Mahalanobis Distance", y = "Density",
title = "Parameter Evaluation Plot",
subtitle = subtitle,
caption = paste("Distance Values :","c1 =", round(c1, 2),
", d =", round(initial.distance, 2),
", c2 =", round(c2, 2))) +
ggplot2::theme(plot.subtitle = ggplot2::element_text(color = "red"))
threshold.plot
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
save.plots = TRUE
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
output.dir = ""
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
tikzDevice::tikz(file = filename)
print(threshold.plot)
dev.off()
# ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
install.packages("tikzDevice")
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
tikzDevice::tikz(file = filename)
print(threshold.plot)
dev.off()
# ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
output.dir =
"Output"
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
tikzDevice::tikz(file = filename)
print(threshold.plot)
dev.off()
# ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
test.data <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
test.data
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
if (model.relation != ""){
response.var <- stringr::str_trim(strsplit(deparse(model.relation), "\\~")[[1]][1])
train.response <- df.train[[response.var]]
test.response <- df.train[[response.var]]
df.train <- as.data.frame(model.matrix(model.relation, df.train))[-c(1)]
df.test <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
df.train[[response.var]] <- train.response
df.test[[response.var]] <- test.response
}
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
response.var <- stringr::str_trim(strsplit(deparse(model.relation), "\\~")[[1]][1])
train.response <- df.train[[response.var]]
test.response <- df.train[[response.var]]
df.train <- as.data.frame(model.matrix(model.relation, df.train))[-c(1)]
df.test <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
df.train
df.test
train.response
df.train[[response.var]] <- train.response
df.train
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
?diagnose
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
set.seed(20)
example("diagnose", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
diamonds
diamonds$x
print(model.relation)
[-c(1)]
test.data <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
test.data
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
df.train
head(df.train)
lm(model.relation, data = df.train)
lm(price ~ x:y:z + depth, data = df.train)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
set.seed(19)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
set.seed(20)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Outp
ut")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
<<<<<<< HEAD
df <- read.csv("../../../Downloads/Life Expectancy Data.csv")
df.kernel()
df
colnames(df)
model.relation <- Life.expectancy ~ Population + percentage.expenditure + BMI + Schooling
s <- sample(x = 1:nrow(df), size = floor(nrow(df)*0.8), replace = F)
df.train <- df[s, ]
df.test <- df[-s, ]
diagnose("Expectancy", df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
df
is.na(df)
=======
?diagnose
?diagnose
?diagnose
?diagnose
devtools::load_all(".")
set.seed(19)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
diagnose(dataset.name, df.train, df.test, model.relation = model.relation, metric.performance = "Normalized AIC", num.simulations = 200, alpha = 0.05, save.plots = TRUE, output.dir = "Output")
install.packages('Rcpp')
install.packages("Rcpp")
diagnose(dataset.name, df.train, df.test, model.relation = model.relation, metric.performance = "Normalized AIC", num.simulations = 200, alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
set.seed(19)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
df.train
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
diagnose(dataset.name, df.train, df.test, model.relation = model.relation, metric.performance = "Normalized AIC", num.simulations = 200, alpha = 0.05, save.plots = TRUE, output.dir = "Output")
install.packages("latex2exp")
library(RandomSplitDiagnostics)
set.seed(19)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
diagnose(dataset.name, df.train, df.test, model.relation = model.relation, metric.performance = "Normalized AIC", num.simulations = 200, alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
>>>>>>> 518f81c5f94922f9460df2f26e30113d7fc1b943
library(RandomSplitDiagnostics)
?diagnose
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
?diagnose
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
diagnose(dataset.name, df.train, df.test, num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
diagnose(dataset.name, df.train, df.test,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
diagnose(dataset.name, df.train, df.test,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
