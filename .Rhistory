source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
data <- data[order(data$Sport),]
data
View(data)
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
data <- dplyr::arrange(data, Sport)
data
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
data <- read.csv("sports - Sheet2.csv")
data <- arrange(data, Sport)
data <- dplyr::arrange(data, Sport)
data
mask <- rep("Train", each = nrow(data))
mask
mask[[1, 2, 3, 4]] = "Test"
mask[c(1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 16, 17, 21, 22, 23)] = "Test"
mask
mask <- rep("Test", each = nrow(data))
mask[c(1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 16, 17, 21, 22, 23)] = "Train"
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[c(1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15, 16, 17, 21, 22, 23)] = "Train"
data$Set <- mask
p <-    ggplot(data, aes(Last.Name, Net.worth, color = Sport, shape = Set)) +
geom_point(size = 2) + guides(size = "none") +
theme_bw() +
ggtitle("Stratified Splitting") +
scale_shape_manual(values=c(11, 16)) +
scale_color_manual(values = c("#da1e28",  "#08bdba",  "#6929c4", "#ffb635")) +
theme(text = element_text(size = 3),
legend.text = element_text(size = 3),
axis.text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1, size = 4),
title = element_text(face = "bold", size = 6)) +
guides(colour = guide_legend(override.aes = list(size = 2))) +
scale_y_continuous(labels = scales::comma_format(big.mark = ",",
decimal.mark = "."))
print(p)
ggplot2::ggsave("StratifiedSplitting.png", plot = p, device = 'png', width = 5, height = 3, dpi = 1000, bg = "white")
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
mask <- rep("Test", each = nrow(data))
mask[15:25,] = "Train"
mask[15:25] = "Train"
mask
mask <- rep("Test", each = nrow(data))
mask[1:14] = "Train"
ap <- ggpubr::ggarrange(p1, p2, p3, nrow = 1, ncol = 2, common.legend = TRUE, legen = "bottom")
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
# ------------------------------ random splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
p1 <- make_plot(data, title)
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[c(1, 2, 5, 6, 7, 10, 13, 14, 16, 17, 18)] = "Train"
data$Set <- mask
title <- "Stratified Splitting"
p2 <- make_plot(data, title)
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[5:14] = "Train"
data$Set <- mask
title <- "Cluster-based Splitting"
p3 <- make_plot(data, title)
data <- read.csv("sports - Sheet2.csv")
data <- data[order(data$Net.worth),]
data
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
data <- read.csv("sports - Sheet2.csv")
data <- read.csv("sports - Sheet2.csv")
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Sport, shape = Set)) +
geom_point(size = 2) + guides(size = "none") +
theme_bw() +
ggtitle("hello") +
scale_shape_manual(values=c(4, 16)) +
scale_color_manual(values = c("#da1e28",  "#08bdba",  "#6929c4", "#ffb635")) +
theme(text = element_text(size = 3),
legend.text = element_text(size = 3),
axis.text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1, size = 4),
title = element_text( face = "bold", size = 5)) +
guides(colour = guide_legend(override.aes = list(size = 2))) +
scale_y_continuous(labels = scales::comma_format(big.mark = ",",
decimal.mark = "."))
print(p)
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Sport, shape = Set)) +
geom_point(size = 2) + guides(size = "none") +
theme_bw() +
ggtitle("hello") +
scale_shape_manual(values=c(4, 16)) +
scale_color_manual(values = c("#da1e28",  "#08bdba",  "#6929c4", "#ffb635")) +
theme(text = element_text(size = 3),
legend.text = element_text(size = 3),
axis.text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1, size = 4),
title = element_text( face = "bold", size = 5)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
data <- read.csv("sports - Sheet2.csv")
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
p <- data %>% mutate(class = fct_reorder(Last.Name, .fun='length' )) %>%
ggplot( aes(x = Sport, y = Last.Name, color = Sport, shape = Set)) +
geom_point(size = 2) + guides(size = "none") +
theme_bw() +
ggtitle("hello") +
scale_shape_manual(values=c(4, 16)) +
scale_color_manual(values = c("#da1e28",  "#08bdba",  "#6929c4", "#ffb635")) +
theme(text = element_text(size = 3),
legend.text = element_text(size = 3),
axis.text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1, size = 4),
title = element_text( face = "bold", size = 5)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
data <- mutate(class = fct_reorder(Last.Name, .fun='length' ))
data <- dplyr::mutate(class = fct_reorder(Last.Name, .fun='length' ))
data <- dplyr::mutate(class = dplyr::fct_reorder(Last.Name, .fun='length' ))
data <- dplyr::mutate(class = gggplot2::fct_reorder(Last.Name, .fun='length' ))
data <- dplyr::mutate(class = forcats::fct_reorder(Last.Name, .fun='length' ))
data <- dplyr::mutate(class = forcats::fct_reorder(data$Last.Name, .fun='length' ))
data <- dplyr::mutate(class = forcats::fct_reorder(data$Last.Name, data$Net.worth, .fun='length' ))
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
data <- read.csv("sports - Sheet2.csv")
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Sport, shape = Set)) +
geom_point(aes(size = Net.worth)) + guides(size = "none") +
theme_bw() +
ggtitle("hello") +
scale_shape_manual(values=c(4, 16)) +
scale_color_manual(values = c("#da1e28",  "#08bdba",  "#6929c4", "#ffb635")) +
theme(text = element_text(size = 3),
legend.text = element_text(size = 3),
axis.text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1, size = 4),
title = element_text( face = "bold", size = 5)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Sport, shape = Set)) +
geom_point(aes(size = Net.worth)) +
theme_bw() +
ggtitle("hello") +
scale_shape_manual(values=c(4, 16)) +
scale_color_manual(values = c("#da1e28",  "#08bdba",  "#6929c4", "#ffb635")) +
theme(text = element_text(size = 3),
legend.text = element_text(size = 3),
axis.text = element_text(size = 4),
axis.text.x = element_text(angle = 45, hjust = 1, size = 4),
title = element_text( face = "bold", size = 5)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
data <- read.csv("sports - Sheet2.csv")
data
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
# p1 <- make_plot(data, title)
p1 <- make_plot2(data, title)
make_plot2 <- function(data, title){
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Sport, shape = Set)) +
geom_point(aes(size = Net.worth)) +
theme_bw() +
ggtitle(title) +
scale_shape_manual(values=c(18, 16)) +
scale_color_manual(values = c("#da1e28",  "#08bdba",  "#6929c4", "#ffb635")) +
theme(text = element_text(size = 2),
legend.text = element_text(size = 2),
axis.text = element_text(size = 3),
axis.text.x = element_text(size = 3, vjust = -20 ),
title = element_text( face = "bold", size = 4)) +
guides(colour = guide_legend(override.aes = list(size = 2)))
print(p)
return(p)
}
# ------------------------------ random splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
# p1 <- make_plot(data, title)
p1 <- make_plot2(data, title)
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
str <- "tello\nhaee"
str
str <- "tello\nhaee"
str
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
devtools::load_all(".")
devtools::load_all(".")
example(diagnose)
?diagnose
library(AppliedPredictiveModeling)
dataset_name <- "Abalone"
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df_train <- abalone[s, ]
df_test <- abalone[-s, ]
model_relation <- WholeWeight ~ Height + LongestShell + Diameter
diagnose(dataset_name, df_train, df_test, model_relation)
library(AppliedPredictiveModeling)
dataset_name <- "Abalone"
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df_train <- abalone[s, ]
df_test <- abalone[-s, ]
model_relation <- WholeWeight ~ Height + LongestShell + Diameter
diagnose(dataset_name, df_train, df_test, model_relation)
mean1 = c(1, 5, 3, -4, 1)
cov1 = cov(df_train)
response_var <- stringr::str_trim(strsplit(deparse(model_relation), "\\~")[[1]][1])
params <- strsplit(strsplit(deparse(model_relation), "\\~")[[1]][2], "\\+")[[1]]
independent_vars  <- unlist(lapply(params, function(x){return(stringr::str_trim(x))}))
cov1 = cov(df_train[c(response_var, independent_vars)])
mean1 = colMeans(df_train[c(response_var, independent_vars)])
mean2 = colMeans(df_test[c(response_var, independent_vars)])
t(mean1-mean2)*inv(cov1)*(mean1-mean2)
t(mean1-mean2)*matlib::inv(cov1)*(mean1-mean2)
library(matlib)
install.packages(matlib)
install.packages("matlib")
2^2
2**2
source('~/BTP/BTP-Optimal-Split/myPackage/R/diagnose.R')
library(AppliedPredictiveModeling)
dataset_name <- "Abalone"
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df_train <- abalone[s, ]
df_test <- abalone[-s, ]
model_relation <- WholeWeight ~ Height + LongestShell + Diameter
diagnose(dataset_name, df_train, df_test, model_relation)
devtools::load_all(".")
library(AppliedPredictiveModeling)
dataset_name <- "Abalone"
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df_train <- abalone[s, ]
df_test <- abalone[-s, ]
model_relation <- WholeWeight ~ Height + LongestShell + Diameter
diagnose(dataset_name, df_train, df_test, model_relation)
devtools::load_all(".")
diagnose(dataset_name, df_train, df_test, model_relation)
library(AppliedPredictiveModeling)
dataset_name <- "Abalone"
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df_train <- abalone[s, ]
df_test <- abalone[-s, ]
model_relation <- WholeWeight ~ Height + LongestShell
diagnose(dataset_name, df_train, df_test, model_relation)
diamonds_data <- read.csv("/home/eklavya/BTP/BTP-Optimal-Split/task11/diamonds.csv")
diamonds_data
diamonds_data$X <- NULL
diamonds_data
library(devtools)
use_data(diamonds_data)
use_data(abalone)
rm(diamonds_data)
diamonds <- read.csv("/home/eklavya/BTP/BTP-Optimal-Split/task11/diamonds.csv")
diamonds$X <- NULL
diamonds
use_data(diamonds)
data("diamonds")
diamonds
rm(diamonds)
rm(abalone)
devtools::load_all(".")
devtools::load_all(".")
help(diagnose)
library(myPackage)
example("diagnose", package = "mypackage")
example("diagnose", package = "myPackage")
devtools::load_all(".")
example("diagnose", package = "myPackage")
library(myPackage)
example("diagnose", package = "myPackage")
library(myPackage)
example("diagnose", package = "myPackage")
library(devtools)
devtools::load_all(".")
library(myPackage)
example("diagnose", package = "myPackage")
m1 <- lm(model_relation, data = df_train)
m1
m1.y
m1.price
m1.x
m1
m1.fitted.values()
m1.fitted.values
m1[fitted.values]
m1(fitted.values)
model_relation
model_relation <- price ~ x + y*z + depth
model_relation
m1 <- lm(model_relation, data = df_train)
m1
m1 <- lm(price ~ x:y:z, data = df_train)
m1
summary(m1)
fit1 <- fitted(m1)
fit1
dim(fit1)
size(fit1)
fitted.values(m1)
m1 <- lm(price ~ x:y + z + depth, data = df_train)
fitted.values(m1)
terms(m1)
terms(m1, "variables")
model(m1, 'data.frame')
data.frame(m1)
model.matrix(m1)
devtools::load_all(".")
library(myPackage)
library(devtools)
example(diagnose, "myPackage")
library(myPackage)
install.packages("factoextra")
library(devtools)
example(diagnose, "myPackage")
df = read.csv("Output/Abalone/WholeWeight ~ Height + LongestShell + Diameter.csv")
df_melt = melt(df, id.vars = "distance", value.name = "performance")[c(1, 3)]
df_melt = reshape2::melt(df, id.vars = "distance", value.name = "performance")[c(1, 3)]
df_melt
x = scale(df_melt)
df_scaled = scale(df_melt)
rm(x)
df_scaled
View(df_scaled)
df_melt
df = read.csv("Output/Abalone/WholeWeight ~ Height + LongestShell + Diameter.csv")
df_melt = reshape2::melt(df[c(1, 3, 4)], id.vars = "distance", value.name = "performance")[c(1, 3)]
df_scaled = scale(df_melt)
df_scaled
km <- kmeans(df_scaled, 3)
factoextra::fviz_cluster(km , df_scaled)
factoextra::fviz_cluster(km , df_scaled, ellipse.type = "euclid")
factoextra::fviz_cluster(km , df_scaled, ellipse.type = "norm")
df = read.csv("Output/Diamonds/price ~ x + y + z + depth.csv")
df_melt = reshape2::melt(df[c(1, 3, 4)], id.vars = "distance", value.name = "performance")[c(1, 3)]
df_scaled = scale(df_melt)
km <- kmeans(df_scaled, 3)
factoextra::fviz_cluster(km , df_scaled, ellipse.type = "norm")
factoextra::fviz_cluster(km , df_scaled)
km <- kmeans(df_scaled, 4)
factoextra::fviz_cluster(km , df_scaled)
km <- kmeans(df_scaled, 5)
factoextra::fviz_cluster(km , df_scaled)
df = read.csv("Output/Diamonds/price ~ x + y + z + depth.csv")
df_scaled = scale(df[c(1, 3)])
km <- kmeans(df_scaled, 3)
km <- kmeans(df_scaled, 2)
factoextra::fviz_cluster(km , df_scaled)
km <- kmeans(df_scaled, 3)
factoextra::fviz_cluster(km , df_scaled)
km <- kmeans(df_scaled, 6)
factoextra::fviz_cluster(km , df_scaled)
km <- kmeans(df_scaled, 9)
factoextra::fviz_cluster(km , df_scaled)
View(km)
View(km)
km[["centers"]]
devtools::load_all(".")
library(myPackage)
devtools::load_all(".")
library(myPackage)
setwd("~/BTP/BTP-Optimal-Split/vizualization")
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/vizualize.R')
df = read.csv("Output/Abalone/WholeWeight ~ Height + LongestShell + Diameter.csv")
df_melt = reshape2::melt(df[c(1, 3, 4)], id.vars = "distance", value.name = "performance")[c(1, 3)]
df_scaled = scale(df_melt)
km <- kmeans(df_scaled, 3)
factoextra::fviz_cluster(km , df_scaled)
df = read.csv("Output/Abalone/WholeWeight ~ Height + LongestShell + Diameter.csv")
setwd("~/BTP/BTP-Optimal-Split/myPackage")
df = read.csv("Output/Abalone/WholeWeight ~ Height + LongestShell + Diameter.csv")
df_melt = reshape2::melt(df[c(1, 3, 4)], id.vars = "distance", value.name = "performance")[c(1, 3)]
df_scaled = scale(df_melt)
km <- kmeans(df_scaled, 3)
factoextra::fviz_cluster(km , df_scaled)
df = read.csv("Output/Diamonds/price ~ x + y + z + depth.csv")
df_melt = reshape2::melt(df[c(1, 3, 4)], id.vars = "distance", value.name = "performance")[c(1, 3)]
df_scaled = scale(df_melt)
km <- kmeans(df_scaled, 3)
km$centers
factoextra::fviz_cluster(km , df_scaled)
df = read.csv("Output/Diamonds/price ~ x + y + z + depth.csv")
df_melt = reshape2::melt(df[c(1, 3, 4)], id.vars = "distance", value.name = "performance")[c(1, 3)]
df_scaled = scale(df_melt)
km <- kmeans(df_scaled, 6)
km$centers
factoextra::fviz_cluster(km , df_scaled)
View(p1)
km.c <- km$centers
