# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
install.packages("ggthemr")
install.packages("ggthemr")
install.packages("paletteer")
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# ---------------- Example 1 ----------------
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
log(1222)
log(c(1, 54513, 132))
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
data <- read.csv("sports - Sheet2.csv")
data
vec <- sort(data)
?sort
df <- data[order(data$Net.worth),]
df
vec <- df$Last.Name
vec
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
getwd()
library(RandomSplitDiagnostics)
library(usethis)
library(devtools)
?diagnose_split
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
x <- abalone[s, ]
y <- abalone[-s, ]
get_mnb_dist <- function(df1, df2){
mnb_dist <- sqrt(mean((mahalanobis(df2, colMeans(df1), cov(df1)))^2))
return(mnb_dist)
}
5**2
5^2
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
abalone
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
library(sm)
install.packages("sm")
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
plot(density(d1.vec))
plot(density(d2.vec))
plot(density(d.vec))
plot()
sm.density.compare(d1.vec, d2.vec, d.vec, group = c("Train obs to test mean",
"Test obs to train mean",
"d1^2 - d2^2"), title(main="Comparing density"))
sm.density.compare(c(d1.vec, d2.vec, d.vec), group = c("Train obs to test mean",
"Test obs to train mean",
"d1^2 - d2^2"), title(main="Comparing density"))
df <- data.frame(d1 = d1.vec, d2 = d2.vec, d = d.vec)
df
melt(df)
reshap2::melt(df)
reshape2::melt(df)
library(ggplot2)
ggplot2(df, aes(x = value, fill = variable)) + geom_density(alpha = 0.5)
ggplot(df, aes(x = value, fill = variable)) + geom_density(alpha = 0.5)
df <- melt(data.frame(d1 = d1.vec, d2 = d2.vec, d = d.vec))
library(sm)
library(ggplot2)
library(reshape2)
d
df <- melt(data.frame(d1 = d1.vec, d2 = d2.vec, d = d.vec))
ggplot(df, aes(x = value, fill = variable)) + geom_density(alpha = 0.5)
ggplot(df, aes(x = value, fill = variable)) + geom_density(alpha = 0.5) + theme_bw()
ggplot(df[df$variable == 'd1'], aes(x = value, fill = variable)) + geom_density(alpha = 0.5) + theme_bw()
ggplot(df[df['variable'] == 'd1'], aes(x = value, fill = variable)) + geom_density(alpha = 0.5) + theme_bw()
df <- data.frame(d1 = d1.vec, d2 = d2.vec, d = d.vec)
ggplot(df, aes(x = d1)) + geom_density(alpha = 0.5) + theme_bw()
ggplot(df, aes(x = d1)) + geom_density(alpha = 0.5) + theme_bw() + xlim(-5000, 5000)
ggplot(df, aes(x = d1)) + geom_density(alpha = 0.5) + theme_bw() + xlim(-2000, 4000)
ggplot(df, aes(x = d1)) + geom_density(alpha = 0.5) + theme_bw()
plot(density(d1.vec))
ggplot(df, aes(x = d1)) + geom_density() + theme_bw()
df <- data.frame(d1 = d1.vec, d2 = d2.vec, d = d.vec)
ggplot(df, aes(x = d1)) + geom_density() + theme_bw() +
ggtitle("Distance of Train observations from Test Mean")
ggplot(df, aes(x = d2)) + geom_density() + theme_bw() +
ggtitle("Distance of Test observations from Train Mean")
ggplot(df, aes(x = d)) + geom_density() + theme_bw() +
ggtitle("d1^2 - d2^2")
ggplot(melt(df), aes(x = value, fill = variable)) + geom_density(alpha = 0.5) + theme_bw()
df
tail(melt(df))
plot(density(d1.vec))
ggplot(melt(df), aes(x = value, fill = variable)) + geom_density(alpha = 0.5, trim = TRUE) + theme_bw()
ggplot(melt(df), aes(x = value, fill = variable)) + theme_bw() +
geom_density(alpha = 0.5, trim = TRUE) +
ggtitle("Comparing densities of all three distances")
ggplot(melt(df), aes(x = value, fill = variable)) + theme_bw() +
geom_density(alpha = 0.5, trim = TRUE) +
ggtitle("Comparing densities of all three distances") + legend(legend = c("d1^2", "d2^2", "d1^2 - d2^2"))
ggplot(melt(df), aes(x = value, fill = variable)) + theme_bw() +
geom_density(alpha = 0.5, trim = TRUE) +
ggtitle("Comparing densities of all three distances") + legend(x = c("d1^2", "d2^2", "d1^2 - d2^2"))
df <- data.frame("d1^2" = d1.vec, "d2^2" = d2.vec, "d1^2 - d2^2" = d.vec)
ggplot(df, aes(x = "d1^2")) + geom_density() + theme_bw() +
ggtitle("Distance of Train observations from Test Mean (d1^2)")
df
df <- data.frame(d1 = d1.vec, d2 = d2.vec, d = d.vec)
ggplot(df, aes(x = d1)) + geom_density() + theme_bw() +
ggtitle("Distance of Train observations from Test Mean (d1^2)")
ggplot(df, aes(x = d2)) + geom_density() + theme_bw() +
ggtitle("Distance of Test observations from Train Mean (d2^2)")
ggplot(df, aes(x = d)) + geom_density() + theme_bw() +
ggtitle("d1^2 - d2^2")
ggplot(melt(df), aes(x = value, fill = variable)) + theme_bw() +
geom_density(alpha = 0.5, trim = TRUE) +
ggtitle("Comparing densities of d1^2, d2^2, and d^2")
ggplot(melt(df), aes(x = value, fill = variable)) + theme_bw() +
geom_density(alpha = 0.5, trim = TRUE) +
ggtitle("Comparing densities of d1^2, d2^2, and d^2") +
scale_fill_discrete(name = "Distance", labels = c("d1^2", "d2^2", "d^2"))
ggplot(melt(df), aes(x = value, fill = variable)) + theme_bw() +
geom_density(alpha = 0.5, trim = TRUE) +
ggtitle("Comparing densities of the three distances") +
scale_fill_discrete(name = "Distance", labels = c("d1^2", "d2^2", "d^2"))
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
dir.create("Density Plots")
ggsave(filename = "Density Plots/p1.png", plot = p1)
library(ggpubr)
ap <- ggarrange(p4.1, p4.2, ncol = 2, nrow = 1)
print(ap)
ggsave(filename = "Density Plots/p4.png", plot = ap, bg = "white")
ggsave(filename = "Density Plots/p4.png", plot = ap, bg = "white", width = 10)
ap <- ggarrange(p4.1, p4.2, ncol = 2, nrow = 1, common.legend = TRUE, legend = "Bottom")
ggsave(filename = "Density Plots/p4.png", plot = ap, bg = "white", width = 10)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
library(RandomSplitDiagnostics)
example("diagnose_plot", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
example("diagnose_plot", "RandomSplitDiagnostics")
example("diagnose_split", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
example("diagnose_split", "RandomSplitDiagnostics")
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
d.vec
matrix(d.vec)
t(matrix(d.vec))
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
train <- abalone[s, c(2, 3, 4, 5)]
test <- abalone[-s, c(2, 3, 4, 5)]
n1 <- nrow(train)
n2 <- nrow(test)
cov1 <- cov(train)
cov2 <- cov(test)
mu1 <- colMeans(train)
mu2 <- colMeans(test)
pooled_cov <- matrix(((n1-1)*cov1 + (n2-1)*cov2)/(n1 + n2 -2))
diff <- matrix(mu1 - mu2)
t2 <- (n1*n2/(n1 + n2))*(t(diff) %*% pooled_cov %*% diff)
diff %*% pooled_cov
diff
pooled_cov
cov1
cov12
cov2
matrix(cov1)
pooled_cov <- matrix(((n1-1)*cov1 + (n2-1)*cov2)/(n1 + n2 -2), ncol = ncol(train))
diff <- matrix(mu1 - mu2)
t2 <- (n1*n2/(n1 + n2))*(t(diff) %*% pooled_cov %*% diff)
t2
return(t2)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
library(RandomSplitDiagnostics)
example("diagnose_split", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
