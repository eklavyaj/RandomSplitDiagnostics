if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
tikzDevice::tikz(file = filename)
print(threshold.plot)
dev.off()
# ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
install.packages("tikzDevice")
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
tikzDevice::tikz(file = filename)
print(threshold.plot)
dev.off()
# ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
output.dir =
"Output"
if (save.plots){
filename <- paste0(output.dir, "/", dataset.name, "_threshold_plot.tex")
tikzDevice::tikz(file = filename)
print(threshold.plot)
dev.off()
# ggplot2::ggsave(filename, plot = threshold.plot, bg = "white")
print(paste("Threshold Plot saved @", filename))
}
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
test.data <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
test.data
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
if (model.relation != ""){
response.var <- stringr::str_trim(strsplit(deparse(model.relation), "\\~")[[1]][1])
train.response <- df.train[[response.var]]
test.response <- df.train[[response.var]]
df.train <- as.data.frame(model.matrix(model.relation, df.train))[-c(1)]
df.test <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
df.train[[response.var]] <- train.response
df.test[[response.var]] <- test.response
}
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
response.var <- stringr::str_trim(strsplit(deparse(model.relation), "\\~")[[1]][1])
train.response <- df.train[[response.var]]
test.response <- df.train[[response.var]]
df.train <- as.data.frame(model.matrix(model.relation, df.train))[-c(1)]
df.test <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
df.train
df.test
train.response
df.train[[response.var]] <- train.response
df.train
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, flag.simulate = TRUE,
model.relation = model.relation, metric.performance = "Normalized AIC",
num.simulations = 200, flag.find_threshold = TRUE, num.bootstrap = 1000,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
?diagnose
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
set.seed(20)
example("diagnose", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
diamonds
diamonds$x
print(model.relation)
[-c(1)]
test.data <- as.data.frame(model.matrix(model.relation, df.test))[-c(1)]
test.data
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
df.train
head(df.train)
lm(model.relation, data = df.train)
lm(price ~ x:y:z + depth, data = df.train)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
set.seed(19)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
set.seed(20)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Outp
ut")
library(RandomSplitDiagnostics)
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
df <- read.csv("../../../Downloads/Life Expectancy Data.csv")
df.kernel()
df
colnames(df)
model.relation <- Life.expectancy ~ Population + percentage.expenditure + BMI + Schooling
s <- sample(x = 1:nrow(df), size = floor(nrow(df)*0.8), replace = F)
df.train <- df[s, ]
df.test <- df[-s, ]
diagnose("Expectancy", df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
df
is.na(df)
use_package("stats")
library(devtools)
use_package("stats")
use_package("fpc")
use_r("temp5")
use_package("ggplot2")
use_package("reshape2")
use_package('stringr')
library(RandomSplitDiagnostics)
remove(stats)
remove.packages("stats")
detach("package:stats", unload = TRUE)
library(RandomSplitDiagnostics)
example("diagnose", ""RandomSplitDiagnostics"")
example("diagnose", "RandomSplitDiagnostics")
library(stats, lib.loc = "/usr/lib/R/library")
example("diagnose", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
model.matrix(model.relation, df.test)
colnames(model.matrix(model.relation, df.test))
model.relation = WholeWeight ~ Height + LongestShell + diameter
model.matrix(model.relation, df.test)
model.matrix(model.relation, df.test)
model.relation = WholeWeight ~ Height + LongestShell + Diameter
model.matrix(model.relation, df.test)
model.relation = WholeWeight ~ Height + LongestShell + diameter
model.matrix(model.relation, df.test)
model.relation = WholeWeight ~ Height + longestShell + diameter
model.matrix(model.relation, df.test)
df.test[[response.var]]
response.var <- stringr::str_trim(strsplit(deparse(model.relation), "\\~")[[1]][1])
df.test[[response.var]]
response.var
response.var = "whole"
df.test[[response.var]]
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
model.matrix(model.relation, df.test)
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ X:y:z + depth
model.matrix(model.relation, df.test)
?RandomSplitDiagnostics
library(RandomSplitDiagnostics)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
