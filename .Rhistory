# ggplot2::ggsave(paste0(title, '.eps'), plot = p2, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ cluster-based splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[5:14] = "Train"
data$Set <- mask
title <- "Cluster-based Splitting (Sports)"
p3 <- make_plot(data, paste("(c)", title))
print(p3)
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p3, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ Splitting after Sorting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- data[order(data$Net.worth),]
mask <- rep("Test", each = nrow(data))
mask[1:11] = "Train"
data$Set <- mask
title <- "Splitting after Sorting (Net Worth)"
p4 <- make_plot(data, paste("(b)", title))
print(p4)
#
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p4, width = 3.5, height = 3.5,  bg = "white")
p <- ggpubr::ggarrange(p2 + theme(axis.title.x = element_blank()),
p4 + theme(axis.title.y = element_blank(), axis.title.x = element_blank()),
p3,
p1 + theme(axis.title.y = element_blank()),
ncol = 2, nrow = 2, common.legend = TRUE, legend = "right")
ggsave("splitting.eps", plot = p, width = 9, height = 6, bg = "white")
library(ggplot2)
setwd("~/BTP/BTP-Optimal-Split/vizualization")
make_plot <- function(data, title, ordering){
p <- ggplot(data, aes(x = Sport, y = Net.worth, color = Set)) +
geom_point(size = 3) +
theme_light() +
ylab("Net Worth") +
xlab("Sport") +
ggtitle(title) +
theme(plot.title = element_text(size = 13, face = "bold"),
legend.text = element_text(size = 13),
text = element_text(size = 12, family = "Times New Roman"),
legend.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 13),
# axis.text.x = element_text(angle = 30, vjust = 0.7),
axis.title = element_text(size = 13, face = "bold")) +
scale_color_manual(values = c("#4d7cb7", "#FFA500"))
return(p)
}
# ------------------------------ random splitting -------------------------------
set.seed(19)
data <- read.csv("sports - Sheet2.csv")
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
p1 <- make_plot(data, paste("(d)", title))
print(p1)
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p1, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ stratified splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[c(1, 2, 5, 6, 8, 10, 13, 14, 16, 18)] = "Train"
data$Set <- mask
title <- "Stratified Splitting"
p2 <- make_plot(data, paste("(a)", title))
print(p2)
#
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p2, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ cluster-based splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[5:14] = "Train"
data$Set <- mask
title <- "Cluster-based Splitting (Sports)"
p3 <- make_plot(data, paste("(c)", title))
print(p3)
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p3, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ Splitting after Sorting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- data[order(data$Net.worth),]
mask <- rep("Test", each = nrow(data))
mask[1:11] = "Train"
data$Set <- mask
title <- "Splitting after Sorting (Net Worth)"
p4 <- make_plot(data, paste("(b)", title))
print(p4)
#
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p4, width = 3.5, height = 3.5,  bg = "white")
p <- ggpubr::ggarrange(p2 + theme(axis.title.x = element_blank()),
p4 + theme(axis.title.y = element_blank(), axis.title.x = element_blank()),
p3,
p1 + theme(axis.title.y = element_blank()),
ncol = 2, nrow = 2, common.legend = TRUE, legend = "right")
ggsave("splitting.eps", plot = p, width = 9, height = 6, bg = "white")
library(ggplot2)
setwd("~/BTP/BTP-Optimal-Split/vizualization")
make_plot <- function(data, title, ordering){
p <- ggplot(data, aes(x = Sport, y = Net.worth, color = Set)) +
geom_point(size = 3) +
theme_light() +
ylab("Net Worth") +
xlab("Sport") +
ggtitle(title) +
theme(plot.title = element_text(size = 13, face = "bold"),
legend.text = element_text(size = 13),
text = element_text(size = 12, family = "Helvetica"),
legend.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 13),
# axis.text.x = element_text(angle = 30, vjust = 0.7),
axis.title = element_text(size = 13, face = "bold")) +
scale_color_manual(values = c("#4d7cb7", "#FFA500"))
return(p)
}
# ------------------------------ random splitting -------------------------------
set.seed(19)
data <- read.csv("sports - Sheet2.csv")
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
p1 <- make_plot(data, paste("(d)", title))
print(p1)
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p1, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ stratified splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[c(1, 2, 5, 6, 8, 10, 13, 14, 16, 18)] = "Train"
data$Set <- mask
title <- "Stratified Splitting"
p2 <- make_plot(data, paste("(a)", title))
print(p2)
#
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p2, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ cluster-based splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[5:14] = "Train"
data$Set <- mask
title <- "Cluster-based Splitting (Sports)"
p3 <- make_plot(data, paste("(c)", title))
print(p3)
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p3, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ Splitting after Sorting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- data[order(data$Net.worth),]
mask <- rep("Test", each = nrow(data))
mask[1:11] = "Train"
data$Set <- mask
title <- "Splitting after Sorting (Net Worth)"
p4 <- make_plot(data, paste("(b)", title))
print(p4)
#
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p4, width = 3.5, height = 3.5,  bg = "white")
p <- ggpubr::ggarrange(p2 + theme(axis.title.x = element_blank()),
p4 + theme(axis.title.y = element_blank(), axis.title.x = element_blank()),
p3,
p1 + theme(axis.title.y = element_blank()),
ncol = 2, nrow = 2, common.legend = TRUE, legend = "right")
ggsave("splitting.eps", plot = p, width = 9, height = 6, bg = "white")
library(ggplot2)
setwd("~/BTP/BTP-Optimal-Split/vizualization")
make_plot <- function(data, title, ordering){
p <- ggplot(data, aes(x = Sport, y = Net.worth, color = Set)) +
geom_point(size = 3) +
theme_light() +
ylab("Net Worth") +
xlab("Sport") +
ggtitle(title) +
theme(plot.title = element_text(size = 13, face = "bold"),
legend.text = element_text(size = 13),
text = element_text(size = 12, family = "Helvetica"),
legend.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 13),
# axis.text.x = element_text(angle = 30, vjust = 0.7),
axis.title = element_text(size = 13, face = "bold")) +
scale_color_manual(values = c("#4d7cb7", "#FFA500"))
return(p)
}
# ------------------------------ random splitting -------------------------------
set.seed(19)
data <- read.csv("sports - Sheet2.csv")
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
p1 <- make_plot(data, paste("(d)", title))
print(p1)
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p1, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ stratified splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[c(1, 2, 5, 6, 8, 10, 13, 14, 16, 18)] = "Train"
data$Set <- mask
title <- "Stratified Splitting"
p2 <- make_plot(data, paste("(a)", title))
print(p2)
#
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p2, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ cluster-based splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[5:14] = "Train"
data$Set <- mask
title <- "Cluster-based Splitting (Sports)"
p3 <- make_plot(data, paste("(c)", title))
print(p3)
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p3, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ Splitting after Sorting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- data[order(data$Net.worth),]
mask <- rep("Test", each = nrow(data))
mask[1:11] = "Train"
data$Set <- mask
title <- "Splitting after Sorting (Net Worth)"
p4 <- make_plot(data, paste("(b)", title))
print(p4)
#
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p4, width = 3.5, height = 3.5,  bg = "white")
p <- ggpubr::ggarrange(p2 + theme(axis.title.x = element_blank()),
p4 + theme(axis.title.y = element_blank(), axis.title.x = element_blank()),
p3,
p1 + theme(axis.title.y = element_blank()),
ncol = 2, nrow = 2, common.legend = TRUE, legend = "right")
ggsave("splitting.eps", plot = p, width = 10, height = 6, bg = "white")
library(ggplot2)
setwd("~/BTP/BTP-Optimal-Split/vizualization")
make_plot <- function(data, title, ordering){
p <- ggplot(data, aes(x = Sport, y = Net.worth, color = Set)) +
geom_point(size = 3) +
theme_light() +
ylab("Net Worth") +
xlab("Sport") +
ggtitle(title) +
theme(plot.title = element_text(size = 13, face = "bold"),
legend.text = element_text(size = 12),
text = element_text(size = 12, family = "Helvetica"),
legend.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 13),
# axis.text.x = element_text(angle = 30, vjust = 0.7),
axis.title = element_text(size = 13, face = "bold")) +
scale_color_manual(values = c("#4d7cb7", "#FFA500"))
return(p)
}
# ------------------------------ random splitting -------------------------------
set.seed(19)
data <- read.csv("sports - Sheet2.csv")
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
p1 <- make_plot(data, paste("(d)", title))
print(p1)
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p1, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ stratified splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[c(1, 2, 5, 6, 8, 10, 13, 14, 16, 18)] = "Train"
data$Set <- mask
title <- "Stratified Splitting"
p2 <- make_plot(data, paste("(a)", title))
print(p2)
#
# title <- gsub(" ", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p2, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ cluster-based splitting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- dplyr::arrange(data, Sport)
mask <- rep("Test", each = nrow(data))
mask[5:14] = "Train"
data$Set <- mask
title <- "Cluster-based Splitting (Sports)"
p3 <- make_plot(data, paste("(c)", title))
print(p3)
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p3, width = 3.5, height = 3.5, bg = "white")
# ------------------------------ Splitting after Sorting -------------------------------
data <- read.csv("sports - Sheet2.csv")
data <- data[order(data$Net.worth),]
mask <- rep("Test", each = nrow(data))
mask[1:11] = "Train"
data$Set <- mask
title <- "Splitting after Sorting (Net Worth)"
p4 <- make_plot(data, paste("(b)", title))
print(p4)
#
# title <- gsub(" ", "_", title)
# title <- gsub("\\(", "_", title)
# title <- gsub("\\)", "_", title)
# ggplot2::ggsave(paste0(title, '.eps'), plot = p4, width = 3.5, height = 3.5,  bg = "white")
p <- ggpubr::ggarrange(p2 + theme(axis.title.x = element_blank()),
p4 + theme(axis.title.y = element_blank(), axis.title.x = element_blank()),
p3,
p1 + theme(axis.title.y = element_blank()),
ncol = 2, nrow = 2, common.legend = TRUE, legend = "right")
ggsave("splitting.eps", plot = p, width = 10, height = 6, bg = "white")
setwd("~/BTP/BTP-Optimal-Split/vizualization")
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
library(AppliedPredictiveModeling)
data(abalone)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
boxplot(abalaone$Height)
boxplot(abalone$Height)
max(abalone$Height)
abalone[abalone$Height == max(abalone$Height)]
abalone[abalone$Height == max(abalone$Height),]
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
plot(abalone$Rings, abalone$WholeWeight)
plot(abalone$Rings, abalone$Hei)
plot(abalone$Rings, abalone$Height)
plot(abalone$Rings, abalone$H)
plot(abalone$Rings, abalone)
plot(abalone$Rings, abalone$LongestShell)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
library(RandomSplitDiagnostics)
setwd("~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics")
set.seed(19)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
set.seed(19)
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- Rings ~ LongestShell + Diameter + Height
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
?diagnose
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- Rings ~ LongestShell + Diameter + Height
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
#function call with metric.performance as R Squared, alpha set to 0.06, 400 simulations, unsaved plots and model.relation for regression as WholeWeight ~ LongestShell + Diameter
diagnose(dataset.name, df.train, df.test, model.relation = WholeWeight ~ LongestShell + Diameter,
metric.performance = "R Squared", num.simulations = 400,
alpha = 0.06, save.plots = FALSE, output.dir = "Output")
dataset.name <- "Abalone"
data(abalone)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*split.percentage), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- Rings ~ LongestShell + Diameter + Height
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
#function call with metric.performance as R Squared, alpha set to 0.06, 400 simulations, unsaved plots and model.relation for regression as WholeWeight ~ LongestShell + Diameter
diagnose(dataset.name, df.train, df.test, model.relation = WholeWeight ~ LongestShell + Diameter,
metric.performance = "R Squared", num.simulations = 400,
alpha = 0.06, save.plots = FALSE, output.dir = "Output")
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
set.seed(1)
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
library(RandomSplitDiagnostics)
set.seed(13)
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
split.percentage <- 0.8
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*split.percentage), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose(dataset.name, df.train, df.test, model.relation = model.relation,
metric.performance = "Normalized AIC", num.simulations = 200,
alpha = 0.05, save.plots = TRUE, output.dir = "Output")
