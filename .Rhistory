diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(devtools)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
print("Progress: Running Simulations...\n")
print("Progress: Running Simulations...\n")
library(AppliedPredictiveModeling)
detach("package:AppliedPredictiveModeling", unload = TRUE)
?diagnose_split
df.test$Diameter[10, ]
df.test$Diameter[10]
df.test[3, ]
df.test[1:3, ]
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
example("diagnose_split", "RandomSplitDiagnostics")
# plot threshold line along with the cluster plots
cluster.plot <- cluster.plot +
ggplot2::geom_vline(ggplot2::aes(xintercept = distance.threshold.scaled),
linetype = "dashed",
color = "red") +
ggplot2::theme(axis.text = ggplot2::element_text(size = 4),
legend.text = ggplot2::element_text(size = 6),
title = ggplot2::element_text(size = 6), ) +
ggplot2::geom_text(ggplot2::aes(x = distance.threshold.scaled,
y = 0.8,
label = paste("\nScaled Threshold =",round(distance.threshold.scaled, 3)),
size = 1),
colour="red",
angle=90,
fontface = "plain",
inherit.aes = FALSE) +
ggplot2::xlab("Scaled Modified Mahalanobis Distance") +
ggplot2::ylab("Scaled AIC Score") +
ggplot2::ggtitle(paste("Clustering using DBScan ( Distance with", response.var, ")")) +
ggplot2::theme_bw() +
ggplot2::guides(colour = ggplot2::guide_legend(override.aes = list(size = 4))) +
ggplot2::guides(size = "none")
library(RandomSplitDiagnostics)
example("diagnose_split", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
library(devtools)
example("diagnose_split", "RandomSplitDiagnostics")
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(devtools)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Diamonds"
data(diamonds)
# intial random split of data
s <- sample(x = 1:nrow(diamonds), size = floor(nrow(diamonds)*0.7), replace = F)
df.train <- diamonds[s, ]
df.test <- diamonds[-s, ]
# defining model relation based on variables of data
model.relation <- price ~ x:y:z + depth
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Abalone"
data(abalone)
# intial random split of data
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
# defining model relation based on variables of data
model.relation <- WholeWeight ~ Height + LongestShell + Diameter
# function call
diagnose_split(dataset.name, df.train, df.test, model.relation)
