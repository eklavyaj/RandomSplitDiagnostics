source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
library(RandomSplitDiagnostics)
example("diagnose_plot", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
example("diagnose_plot", "RandomSplitDiagnostics")
example("diagnose_split", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
example("diagnose_split", "RandomSplitDiagnostics")
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
d.vec
matrix(d.vec)
t(matrix(d.vec))
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
data(abalone)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
train <- abalone[s, c(2, 3, 4, 5)]
test <- abalone[-s, c(2, 3, 4, 5)]
n1 <- nrow(train)
n2 <- nrow(test)
cov1 <- cov(train)
cov2 <- cov(test)
mu1 <- colMeans(train)
mu2 <- colMeans(test)
pooled_cov <- matrix(((n1-1)*cov1 + (n2-1)*cov2)/(n1 + n2 -2))
diff <- matrix(mu1 - mu2)
t2 <- (n1*n2/(n1 + n2))*(t(diff) %*% pooled_cov %*% diff)
diff %*% pooled_cov
diff
pooled_cov
cov1
cov12
cov2
matrix(cov1)
pooled_cov <- matrix(((n1-1)*cov1 + (n2-1)*cov2)/(n1 + n2 -2), ncol = ncol(train))
diff <- matrix(mu1 - mu2)
t2 <- (n1*n2/(n1 + n2))*(t(diff) %*% pooled_cov %*% diff)
t2
return(t2)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp1.R')
library(RandomSplitDiagnostics)
example("diagnose_split", "RandomSplitDiagnostics")
library(RandomSplitDiagnostics)
setwd("~/BTP/BTP-Optimal-Split/vizualization")
make_plot2 <- function(data, title, ordering){
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Set, shape = Sport)) +
geom_point(aes(size = Net.worth)) +
ggthemes::theme_fivethirtyeight + ylab("Player") + xlab("Sport") +
ggtitle(title) +
# scale_color_manual(values = c("#4d7cb7", "#FFA500")) +
# scale_color_manual(values = c("#4d7cb7", "#6929c4", "#da1e28",  "#6929c4")) +
theme(text = element_text(size = 4),
legend.text = element_text(size = 7),
axis.text.x = element_text(size = 7),
legend.key.size = unit(1, 'lines'),
axis.text.y = element_text(size = 7),
title = element_text( face = "bold", size = 8)) + expand_limits(x = 0, y = c(0, 19))+
guides(size = guide_legend(title = "Net Worth",override.aes = list( colour = "#959892"))) +
scale_y_discrete(limits = ordering)
# print(p)
return(p)
}
library(ggplot2)
set.seed(19)
data <- read.csv("sports - Sheet2.csv")
data
df.order <- data[order(data$Net.worth),]
ordering <- df.order$Last.Name
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
# p1 <- make_plot(data, title)
p1 <- make_plot2(data, title, ordering)
print(p1)
# p1 <- make_plot(data, title)
p1 <- make_plot2(data, title, ordering)
make_plot2 <- function(data, title, ordering){
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Set, shape = Sport)) +
geom_point(aes(size = Net.worth)) +
ggthemes::theme_fivethirtyeight() + ylab("Player") + xlab("Sport") +
ggtitle(title) +
# scale_color_manual(values = c("#4d7cb7", "#FFA500")) +
# scale_color_manual(values = c("#4d7cb7", "#6929c4", "#da1e28",  "#6929c4")) +
theme(text = element_text(size = 4),
legend.text = element_text(size = 7),
axis.text.x = element_text(size = 7),
legend.key.size = unit(1, 'lines'),
axis.text.y = element_text(size = 7),
title = element_text( face = "bold", size = 8)) + expand_limits(x = 0, y = c(0, 19))+
guides(size = guide_legend(title = "Net Worth",override.aes = list( colour = "#959892"))) +
scale_y_discrete(limits = ordering)
# print(p)
return(p)
}
# p1 <- make_plot(data, title)
p1 <- make_plot2(data, title, ordering)
print(p1)
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Set, shape = Sport)) +
geom_point(aes(size = Net.worth)) +
ggthemes::theme_gdocs() + ylab("Player") + xlab("Sport") +
ggtitle(title) +
# scale_color_manual(values = c("#4d7cb7", "#FFA500")) +
# scale_color_manual(values = c("#4d7cb7", "#6929c4", "#da1e28",  "#6929c4")) +
theme(text = element_text(size = 4),
legend.text = element_text(size = 7),
axis.text.x = element_text(size = 7),
legend.key.size = unit(1, 'lines'),
axis.text.y = element_text(size = 7),
title = element_text( face = "bold", size = 8)) + expand_limits(x = 0, y = c(0, 19))+
guides(size = guide_legend(title = "Net Worth",override.aes = list( colour = "#959892"))) +
scale_y_discrete(limits = ordering)
make_plot2 <- function(data, title, ordering){
p <- ggplot(data, aes(x = Sport, y = Last.Name, color = Set, shape = Sport)) +
geom_point(aes(size = Net.worth)) +
ggthemes::theme_gdocs() + ylab("Player") + xlab("Sport") +
ggtitle(title) +
# scale_color_manual(values = c("#4d7cb7", "#FFA500")) +
# scale_color_manual(values = c("#4d7cb7", "#6929c4", "#da1e28",  "#6929c4")) +
theme(text = element_text(size = 4),
legend.text = element_text(size = 7),
axis.text.x = element_text(size = 7),
legend.key.size = unit(1, 'lines'),
axis.text.y = element_text(size = 7),
title = element_text( face = "bold", size = 8)) + expand_limits(x = 0, y = c(0, 19))+
guides(size = guide_legend(title = "Net Worth",override.aes = list( colour = "#959892"))) +
scale_y_discrete(limits = ordering)
# print(p)
return(p)
}
# p1 <- make_plot(data, title)
p1 <- make_plot2(data, title, ordering)
print(p1)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
library(RandomSplitDiagnostics)
data(abalone)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
set.seed(69)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height
model <- lm(model.relation, data = df.train)
preds.train <- predict(model, df.train)
actual.train <- df.train$WholeWeight
preds.test <- predict(model, df.test)
actual.test <- df.test$WholeWeight
plot(density(df.train$Height))
lines(density(df.test$Height))
set.seed(5)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
plot(density(df.train$Height))
lines(density(df.test$Height))
t.test(df.train$Height, df.test$Height, paired = TRUE)
t.test(df.train$Height, df.test$Height, var.equal = TRUE)
set.seed(69)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
t.test(df.train$Height, df.test$Height, var.equal = TRUE)
hist(df.train$Height)
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta")
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta", breaks = 20)
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta", breaks = 100)
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta", breaks = 1000)
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta", xlim = c(0.0, 0.6), breaks = 1000)
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta", xlim = c(0.0, 0.6), breaks = 500)
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta", xlim = c(0.0, 0.6), breaks = 200)
hist(df.test$Height,
col="yellow", alpha = 0.5 xlim = c(0.0, 0.6), breaks = 200)
hist(df.test$Height,
col="yellow", alpha = 0.5, xlim = c(0.0, 0.6), breaks = 200, add = TRUE)
hist(df.train$Height,
main="Distribution of Height of Species",
xlab="Height",
col="darkmagenta", alpha = 0.5, xlim = c(0.0, 0.6), breaks = 200, freq = FALSE)
ks.test(df.train$Height, df.test$Height)
set.seed(69)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
ks.test(df.train$Height, df.test$Height)
set.seed(5)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
ks.test(df.train$Height, df.test$Height)
set.seed(622)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height
model <- lm(model.relation, data = df.train)
preds.train <- predict(model, df.train)
actual.train <- df.train$WholeWeight
preds.test <- predict(model, df.test)
actual.test <- df.test$WholeWeight
rsq.train <- get_rsq(preds.train, actual.train)
rsq.test <- get_rsq(preds.test, actual.test)
df.train$preds <- preds.train
df.test$preds <- preds.test
p1 <- ggplot(df.train, aes(Height, WholeWeight)) +
geom_point(color = "#4E84C4")+
geom_line(data = df.train, aes(x = Height, y = preds), color = "#D16103") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.train, 3)),
title = "Train Set - I",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone") + xlab("Height")
print(p1)
p2 <- ggplot(df.test, aes(Height, WholeWeight)) +
geom_point(color = "#4E84C4")+
geom_line(data = df.test, aes(x = Height, y = preds), color = "#D16103") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.test, 3)),
title = "Test Set - I",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
print(p2)
ks.test(df.train$Height, df.test$Height)
ks.test(df.train$Height, df.train$Height)
set.seed(69)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height
model <- lm(model.relation, data = df.train)
preds.train <- predict(model, df.train)
actual.train <- df.train$WholeWeight
preds.test <- predict(model, df.test)
actual.test <- df.test$WholeWeight
rsq.train <- get_rsq(preds.train, actual.train)
rsq.test <- get_rsq(preds.test, actual.test)
df.train$preds <- preds.train
df.test$preds <- preds.test
p1 <- ggplot(df.train, aes(Height, WholeWeight)) +
geom_point(color = "#4E84C4")+
geom_line(data = df.train, aes(x = Height, y = preds), color = "#D16103") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.train, 3)),
title = "Train Set - I",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone") + xlab("Height")
p2 <- ggplot(df.test, aes(Height, WholeWeight)) +
geom_point(color = "#4E84C4")+
geom_line(data = df.test, aes(x = Height, y = preds), color = "#D16103") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.test, 3)),
title = "Test Set - I",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
print(p1)
print(p2)
ggsave("Rsq Plots/train_normal.png", plot = p1)
ggsave("Rsq Plots/test_normal.png", plot = p2)
set.seed(2)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height
model <- lm(model.relation, data = df.train)
preds.train <- predict(model, df.train)
actual.train <- df.train$WholeWeight
preds.test <- predict(model, df.test)
actual.test <- df.test$WholeWeight
rsq.train <- get_rsq(preds.train, actual.train)
rsq.test <- get_rsq(preds.test, actual.test)
df.train$preds <- preds.train
df.test$preds <- preds.test
p1 <- ggplot(df.train, aes(Height, WholeWeight)) +
geom_point(color = "#4d7cb7")+
geom_line(data = df.train, aes(x = Height, y = preds), color = "#FFA500") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.train, 3)),
title = "Train Set - II",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
p2 <- ggplot(df.test, aes(Height, WholeWeight)) +
geom_point(color = "#4d7cb7")+
geom_line(data = df.test, aes(x = Height, y = preds), color = "#FFA500") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.test, 3)),
title = "Test Set - II",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
print(p1)
print(p2)
set.seed(3)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height
model <- lm(model.relation, data = df.train)
preds.train <- predict(model, df.train)
actual.train <- df.train$WholeWeight
preds.test <- predict(model, df.test)
actual.test <- df.test$WholeWeight
rsq.train <- get_rsq(preds.train, actual.train)
rsq.test <- get_rsq(preds.test, actual.test)
df.train$preds <- preds.train
df.test$preds <- preds.test
p1 <- ggplot(df.train, aes(Height, WholeWeight)) +
geom_point(color = "#4d7cb7")+
geom_line(data = df.train, aes(x = Height, y = preds), color = "#FFA500") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.train, 3)),
title = "Train Set - II",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
p2 <- ggplot(df.test, aes(Height, WholeWeight)) +
geom_point(color = "#4d7cb7")+
geom_line(data = df.test, aes(x = Height, y = preds), color = "#FFA500") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.test, 3)),
title = "Test Set - II",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
print(p1)
print(p2)
set.seed(123)
s <- sample(x = 1:nrow(abalone), size = floor(nrow(abalone)*0.7), replace = F)
df.train <- abalone[s, ]
df.test <- abalone[-s, ]
model.relation <- WholeWeight ~ Height
model <- lm(model.relation, data = df.train)
preds.train <- predict(model, df.train)
actual.train <- df.train$WholeWeight
preds.test <- predict(model, df.test)
actual.test <- df.test$WholeWeight
rsq.train <- get_rsq(preds.train, actual.train)
rsq.test <- get_rsq(preds.test, actual.test)
df.train$preds <- preds.train
df.test$preds <- preds.test
p1 <- ggplot(df.train, aes(Height, WholeWeight)) +
geom_point(color = "#4d7cb7")+
geom_line(data = df.train, aes(x = Height, y = preds), color = "#FFA500") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.train, 3)),
title = "Train Set - II",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
p2 <- ggplot(df.test, aes(Height, WholeWeight)) +
geom_point(color = "#4d7cb7")+
geom_line(data = df.test, aes(x = Height, y = preds), color = "#FFA500") +
ggthemes::theme_fivethirtyeight() +
theme(legend.position = "none", axis.title = element_text(), plot.subtitle = element_text(color = "red")) +
labs(subtitle = paste("R-squared =", round(rsq.test, 3)),
title = "Test Set - II",
x = "Height",
y = "Whole Weight",
caption = "Source: Abalone")
print(p1)
print(p2)
ks.test(df.train$Height, df.train$Height)
ks.test(df.train$Height, df.test$Height)
ggsave("Rsq Plots/train_drop.png", plot = p1)
ggsave("Rsq Plots/test_drop.png", plot = p2)
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
library(RandomSplitDiagnostics)
dataset.name <- "Housing"
setwd("~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics")
data <- read.csv("housing.csv")
data
summary(data)
data
data
plot(data$longitude, data$median_house_value)
plot(data$latitude, data$median_house_value)
plot(data$population, data$median_house_value)
library(devtools)
use_data(housing)
housing <- read.csv("housing.csv")
use_data(housing)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Housing"
data(housing)
# intial random split of data
s <- sample(x = 1:nrow(housing), size = floor(nrow(housing)*0.7), replace = F)
df.train <- housing[s, ]
df.test <- housing[-s, ]
# defining model relation based on variables of data
model.relation <- median_house_value ~ population + median_income + longitude + latitude
# function call
diagnose(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Housing"
data(housing)
# intial random split of data
s <- sample(x = 1:nrow(housing), size = floor(nrow(housing)*0.7), replace = F)
df.train <- housing[s, ]
df.test <- housing[-s, ]
# defining model relation based on variables of data
model.relation <- median_house_value ~ population + median_income + longitude + latitude
# function call
diagnose(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Housing"
data(housing)
# intial random split of data
s <- sample(x = 1:nrow(housing), size = floor(nrow(housing)*0.7), replace = F)
df.train <- housing[s, ]
df.test <- housing[-s, ]
# defining model relation based on variables of data
model.relation <- median_house_value ~ median_income
# function call
diagnose(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
library(RandomSplitDiagnostics)
# data preparation
dataset.name <- "Housing"
data(housing)
# intial random split of data
s <- sample(x = 1:nrow(housing), size = floor(nrow(housing)*0.7), replace = F)
df.train <- housing[s, ]
df.test <- housing[-s, ]
# defining model relation based on variables of data
model.relation <- median_house_value ~ median_income^2
# function call
diagnose(dataset.name, df.train, df.test, model.relation)
library(RandomSplitDiagnostics)
setwd("~/BTP/BTP-Optimal-Split/vizualization")
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
set.seed(19)
data <- read.csv("sports - Sheet2.csv")
data
df.order <- data[order(data$Net.worth),]
ordering <- df.order$Last.Name
mask = rep('Test', each = nrow(data))
s <- sample(x = 1:nrow(data), size = 0.6*nrow(data), replace = F)
mask[s] = "Train"
data$Set <- mask
title <- "Random Splitting"
# p1 <- make_plot(data, title)
p1 <- make_plot2(data, title, ordering)
print(p1)
ggplot2::ggsave(paste0(title, '.eps'), plot = p1, width = 4, height = 4, dpi = 400, bg = "white")
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
title <- replace(title, " ", "_")
title
title <- gsub(" ", "_", title)
title
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/vizualization/visualize.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
source('~/BTP/BTP-Optimal-Split/RandomSplitDiagnostics/R/temp2.R')
library(RandomSplitDiagnostics)
